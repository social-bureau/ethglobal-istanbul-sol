/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IProntera {
  export type UserInitializationStruct = {
    encryptedUserSecret: PromiseOrValue<BytesLike>;
    publicKeyPrefix: PromiseOrValue<boolean>;
    publicKeyX: PromiseOrValue<BytesLike>;
  };

  export type UserInitializationStructOutput = [string, boolean, string] & {
    encryptedUserSecret: string;
    publicKeyPrefix: boolean;
    publicKeyX: string;
  };
}

export interface PronteraInterface extends utils.Interface {
  functions: {
    "chatInitializations(address,address)": FunctionFragment;
    "getChatInitialization(address,address)": FunctionFragment;
    "getUserInitialization(address)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "initializeChat(bytes,bytes,address)": FunctionFragment;
    "initializeUser(bytes,bool,bytes32)": FunctionFragment;
    "isChatInitialized(address,address)": FunctionFragment;
    "isUserInitialized(address)": FunctionFragment;
    "userInitializations(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chatInitializations"
      | "getChatInitialization"
      | "getUserInitialization"
      | "getVersion"
      | "initializeChat"
      | "initializeUser"
      | "isChatInitialized"
      | "isUserInitialized"
      | "userInitializations"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "chatInitializations",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChatInitialization",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInitialization",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeChat",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeUser",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isChatInitialized",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserInitialized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInitializations",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "chatInitializations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChatInitialization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInitialization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeChat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChatInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInitializations",
    data: BytesLike
  ): Result;

  events: {
    "ChatInitialized(address,address,bytes,bytes)": EventFragment;
    "UserInitialized(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChatInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserInitialized"): EventFragment;
}

export interface ChatInitializedEventObject {
  initializer: string;
  peer: string;
  callerEncryptedChatSecret: string;
  peerEncryptedChatSecret: string;
}
export type ChatInitializedEvent = TypedEvent<
  [string, string, string, string],
  ChatInitializedEventObject
>;

export type ChatInitializedEventFilter = TypedEventFilter<ChatInitializedEvent>;

export interface UserInitializedEventObject {
  user: string;
  init: IProntera.UserInitializationStructOutput;
}
export type UserInitializedEvent = TypedEvent<
  [string, IProntera.UserInitializationStructOutput],
  UserInitializedEventObject
>;

export type UserInitializedEventFilter = TypedEventFilter<UserInitializedEvent>;

export interface Prontera extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PronteraInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chatInitializations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChatInitialization(
      firstUser: PromiseOrValue<string>,
      secondUser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserInitialization(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IProntera.UserInitializationStructOutput]>;

    getVersion(overrides?: CallOverrides): Promise<[string]>;

    initializeChat(
      callerEncryptedChatSecret: PromiseOrValue<BytesLike>,
      peerEncryptedChatSecret: PromiseOrValue<BytesLike>,
      peer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeUser(
      encryptedUserSecret: PromiseOrValue<BytesLike>,
      publicKeyPrefix: PromiseOrValue<boolean>,
      publicKeyX: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isChatInitialized(
      initializer: PromiseOrValue<string>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUserInitialized(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userInitializations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, string] & {
        encryptedUserSecret: string;
        publicKeyPrefix: boolean;
        publicKeyX: string;
      }
    >;
  };

  chatInitializations(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChatInitialization(
    firstUser: PromiseOrValue<string>,
    secondUser: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserInitialization(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IProntera.UserInitializationStructOutput>;

  getVersion(overrides?: CallOverrides): Promise<string>;

  initializeChat(
    callerEncryptedChatSecret: PromiseOrValue<BytesLike>,
    peerEncryptedChatSecret: PromiseOrValue<BytesLike>,
    peer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeUser(
    encryptedUserSecret: PromiseOrValue<BytesLike>,
    publicKeyPrefix: PromiseOrValue<boolean>,
    publicKeyX: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isChatInitialized(
    initializer: PromiseOrValue<string>,
    peer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserInitialized(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userInitializations(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, string] & {
      encryptedUserSecret: string;
      publicKeyPrefix: boolean;
      publicKeyX: string;
    }
  >;

  callStatic: {
    chatInitializations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChatInitialization(
      firstUser: PromiseOrValue<string>,
      secondUser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserInitialization(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IProntera.UserInitializationStructOutput>;

    getVersion(overrides?: CallOverrides): Promise<string>;

    initializeChat(
      callerEncryptedChatSecret: PromiseOrValue<BytesLike>,
      peerEncryptedChatSecret: PromiseOrValue<BytesLike>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeUser(
      encryptedUserSecret: PromiseOrValue<BytesLike>,
      publicKeyPrefix: PromiseOrValue<boolean>,
      publicKeyX: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isChatInitialized(
      initializer: PromiseOrValue<string>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserInitialized(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userInitializations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, string] & {
        encryptedUserSecret: string;
        publicKeyPrefix: boolean;
        publicKeyX: string;
      }
    >;
  };

  filters: {
    "ChatInitialized(address,address,bytes,bytes)"(
      initializer?: PromiseOrValue<string> | null,
      peer?: PromiseOrValue<string> | null,
      callerEncryptedChatSecret?: null,
      peerEncryptedChatSecret?: null
    ): ChatInitializedEventFilter;
    ChatInitialized(
      initializer?: PromiseOrValue<string> | null,
      peer?: PromiseOrValue<string> | null,
      callerEncryptedChatSecret?: null,
      peerEncryptedChatSecret?: null
    ): ChatInitializedEventFilter;

    "UserInitialized(address,tuple)"(
      user?: PromiseOrValue<string> | null,
      init?: null
    ): UserInitializedEventFilter;
    UserInitialized(
      user?: PromiseOrValue<string> | null,
      init?: null
    ): UserInitializedEventFilter;
  };

  estimateGas: {
    chatInitializations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChatInitialization(
      firstUser: PromiseOrValue<string>,
      secondUser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInitialization(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initializeChat(
      callerEncryptedChatSecret: PromiseOrValue<BytesLike>,
      peerEncryptedChatSecret: PromiseOrValue<BytesLike>,
      peer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeUser(
      encryptedUserSecret: PromiseOrValue<BytesLike>,
      publicKeyPrefix: PromiseOrValue<boolean>,
      publicKeyX: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isChatInitialized(
      initializer: PromiseOrValue<string>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserInitialized(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInitializations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chatInitializations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChatInitialization(
      firstUser: PromiseOrValue<string>,
      secondUser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInitialization(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeChat(
      callerEncryptedChatSecret: PromiseOrValue<BytesLike>,
      peerEncryptedChatSecret: PromiseOrValue<BytesLike>,
      peer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeUser(
      encryptedUserSecret: PromiseOrValue<BytesLike>,
      publicKeyPrefix: PromiseOrValue<boolean>,
      publicKeyX: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isChatInitialized(
      initializer: PromiseOrValue<string>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserInitialized(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInitializations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
