/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IProntera {
  export type UserInitializationStruct = {
    userSecret: PromiseOrValue<BytesLike>;
    publicKeyPrefix: PromiseOrValue<boolean>;
    publicKeyX: PromiseOrValue<BytesLike>;
  };

  export type UserInitializationStructOutput = [string, boolean, string] & {
    userSecret: string;
    publicKeyPrefix: boolean;
    publicKeyX: string;
  };
}

export interface IPronteraInterface extends utils.Interface {
  functions: {
    "getChatInitialization(address,address)": FunctionFragment;
    "getUserInitialization(address)": FunctionFragment;
    "initializeChat(bytes,bytes,address)": FunctionFragment;
    "initializeUser(bytes,bool,bytes32)": FunctionFragment;
    "isChatInitialized(address,address)": FunctionFragment;
    "isUserInitialized(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getChatInitialization"
      | "getUserInitialization"
      | "initializeChat"
      | "initializeUser"
      | "isChatInitialized"
      | "isUserInitialized"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getChatInitialization",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInitialization",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeChat",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeUser",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isChatInitialized",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserInitialized",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getChatInitialization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInitialization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeChat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChatInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserInitialized",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IProntera extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPronteraInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getChatInitialization(
      user: PromiseOrValue<string>,
      reciever: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserInitialization(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IProntera.UserInitializationStructOutput]>;

    initializeChat(
      callerSecret: PromiseOrValue<BytesLike>,
      peerSecret: PromiseOrValue<BytesLike>,
      peer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeUser(
      secret: PromiseOrValue<BytesLike>,
      publicKeyPrefix: PromiseOrValue<boolean>,
      publicKeyX: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isChatInitialized(
      initializer: PromiseOrValue<string>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUserInitialized(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getChatInitialization(
    user: PromiseOrValue<string>,
    reciever: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserInitialization(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IProntera.UserInitializationStructOutput>;

  initializeChat(
    callerSecret: PromiseOrValue<BytesLike>,
    peerSecret: PromiseOrValue<BytesLike>,
    peer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeUser(
    secret: PromiseOrValue<BytesLike>,
    publicKeyPrefix: PromiseOrValue<boolean>,
    publicKeyX: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isChatInitialized(
    initializer: PromiseOrValue<string>,
    peer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserInitialized(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getChatInitialization(
      user: PromiseOrValue<string>,
      reciever: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserInitialization(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IProntera.UserInitializationStructOutput>;

    initializeChat(
      callerSecret: PromiseOrValue<BytesLike>,
      peerSecret: PromiseOrValue<BytesLike>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeUser(
      secret: PromiseOrValue<BytesLike>,
      publicKeyPrefix: PromiseOrValue<boolean>,
      publicKeyX: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isChatInitialized(
      initializer: PromiseOrValue<string>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserInitialized(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getChatInitialization(
      user: PromiseOrValue<string>,
      reciever: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInitialization(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeChat(
      callerSecret: PromiseOrValue<BytesLike>,
      peerSecret: PromiseOrValue<BytesLike>,
      peer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeUser(
      secret: PromiseOrValue<BytesLike>,
      publicKeyPrefix: PromiseOrValue<boolean>,
      publicKeyX: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isChatInitialized(
      initializer: PromiseOrValue<string>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserInitialized(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getChatInitialization(
      user: PromiseOrValue<string>,
      reciever: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInitialization(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeChat(
      callerSecret: PromiseOrValue<BytesLike>,
      peerSecret: PromiseOrValue<BytesLike>,
      peer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeUser(
      secret: PromiseOrValue<BytesLike>,
      publicKeyPrefix: PromiseOrValue<boolean>,
      publicKeyX: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isChatInitialized(
      initializer: PromiseOrValue<string>,
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserInitialized(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
